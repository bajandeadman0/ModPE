//Multiple Homes v1.0
//Made by Bajan_Deadman0
//2014 Bajan_Deadman0
//Please do not redistribute or say this is your mod! 
 
var xhome=0;
var yhome=0;
var zhome=0;
var xback=0;
var yback=0;
var zback=0;
var name="";
 
//Auto update 
 
var version="1.0";
var checkForUpdate=false;
var updateWindow=false; 
var newUpdate;
var updateMod; 
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(); 
 
 function checkVersion() {
    var r  = new java.lang.Runnable() {
        run: function() {
            try {
                var urls= new java.net.URL("https://raw.githubusercontent.com/bajandeadman0/ModPE/master/mhversion");
                var check = urls.openConnection();
                check.setRequestMethod("GET");
                check.setDoOutput(true);
                check.connect();
                check.getContentLength();
                var script = check.getInputStream();
                var typeb = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                var byteCount = 0; 
                var checkedVersion;
                while((byteCount = script.read(typeb)) != -1) { 
                    checkedVersion = new java.lang.String(typeb, 0, byteCount);               
                }
                newUpdate = checkedVersion;
                if(version+"\n" != checkedVersion) {
                    clientMessage("§8[MH] §fNew version! " + newUpdate);
                    updateWindow=true;
                }
                else if(version+"\n"==checkedVersion){
                clientMessage("§8[MH] No updates available");
                }
            }
            catch(err) {
                clientMessage("§8[MH] Update check failed ");
                if(err=="JavaException: java.net.UnknownHostException: raw.githubusercontent.com") {
                                clientMessage("§8[MH] No internet connection.");
                            }
                            else {
                                clientMessage("§8[MH]   Error: \n" + err);
                            } 
            }
        }
    }
    var threadt = new java.lang.Thread(r);
    threadt.start();
}
function updateVersion() {
    try {
        var upd = new android.app.AlertDialog.Builder(ctx);
        upd.setTitle("New version available!");
        upd.setMessage("An update to Multiple Homes was found!\nWould you like to update it now?\nCurrent version: " + version + "\nNew version: " + newUpdate);
        upd.setNegativeButton("Later", new android.content.DialogInterface.OnClickListener() {
            onClick: function(par1) {
            dialog.dismiss(); 
   }
        });
        upd.setPositiveButton("Update", new android.content.DialogInterface.OnClickListener() {
            onClick: function(par1) {
                var ru  = new java.lang.Runnable() {
                    run: function() {
                        try {
                            var urls = new java.net.URL("https://raw.githubusercontent.com/bajandeadman0/ModPE/master/Multiple%20Homes");
                            var check = urls.openConnection();
                            check.setRequestMethod("GET");
                            check.setDoOutput(true);
                            check.connect();
                            check.getContentLength();
                            var script = check.getInputStream();
                            var typeb = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                            var byteCount = 0;
                            while((byteCount = script.read(typeb)) != -1) { 
                                updateMod += new java.lang.String(typeb, 0, byteCount);               
                            }
                            var modpeFolder = ctx.getDir("modscripts", 0);
                            var modpeFile = new java.io.File(modpeFolder, "Multiple Homes.js");
                            var update = new java.io.PrintWriter(modpeFile);
                            update.write(updateMod);
                            update.flush();
                            update.close();
                             
                            try {
                                net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(modpeFile, false);
                                net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(modpeFile, true);
                                clientMessage("§3[MH] Downloaded and enabled!");
                                   
                            }
                            catch(err) {
                                clientMessage("§8[MH] Error: \n" + err);
                            }
                        }
                        catch(err) {
                            clientMessage("§8[MH] Error: \n" + err);
                        }
                    }
                }
                var threadt = new java.lang.Thread(ru);
                threadt.start();
            }
        });
        var dialog = upd.create();
        dialog.show() 
    }
    catch(err) {
        clientMessage("§8[MH] Error: \n" + err);
    }
}
  
 function modTick(){
 if(checkForUpdate==false) {
        print("Checking for updates");
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
                    checkVersion();
                }
                catch(err) {
                    clientMessage("§8[IS] Error: \n"+err);
                }
            }
        }));
        checkForUpdate=true;
    }
    if(updateWindow) {
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
                    updateVersion();
                }
                catch(err) {
                    clientMessage("§8[IS] Error: \n" + err);
                }
            }
        }));
        updateWindow=false;
    } 
 } 
  
 function procCmd(c) {
   var p = c.split(" ");
   var command = p[0];
   switch(command){
   default: {
            clientMessage("§8[MH] §fType /home 'name' to tp.\n§8[MH] §fType /sethome 'name' to set your house.\n§8[MH] §fType /back or /home back to go to the last point before teleportation. \n§8[MH] §fType /last death or /home lastdeath to go to the last death point. ");
            break;
        } 
        case'home':{
         if((!p[1])) { 
        clientMessage("§8[MH] §fNo home name selected");
        }
        else if((p[1])=="back"){
         name=p[1];
        load(); 
        }
        else{
        xhome=Player.getX();
        yhome=Player.getY()+1;
        zhome=Player.getZ(); 
        name="back";
        save();
        name=p[1];
        load();
         clientMessage("§8[MH] §fTeleported to home "+name+"."); 
        }
        break;
        }
        case'sethome':{
         if((!p[1])) { 
        clientMessage("§8[MH] §fNo home name selected");
        }
        else{
        xhome=Player.getX();
        yhome=Player.getY()+1;
        zhome=Player.getZ();
         name=p[1]; 
        save();
         clientMessage("§8[MH] §fHome "+name+" saved."); 
        } 
         break; 
        }
        case'back':{
         name=p[0];
         xback=Player.getX();
           yback=Player.getY()+1;
           zback=Player.getZ(); 
        load(); 
        xhome=xback;
        yhome=yback;
        zhome=zback;
        save();
         clientMessage("§8[MH] §fReturned to last teleportation point"); 
         break;
        }
         case'last':{
         if((p[1])=="death"){
         name="lastdeath";
        load(); 
         clientMessage("§8[MH] §fReturned to last death point"); 
         }
         else{
         clientMessage("§8[MH] §fThe correct command is last death"); 
         }
         break;
        } 
        } 
        } 
 
 function deathHook(murderer, victim) {
 if (victim==Player.getEntity()){
 name="lastdeath";
 xhome=Player.getX();
 yhome=Player.getY()+1;
 zhome=Player.getZ(); 
 save();
 clientMessage("§8[MH] §fSaved last death point"); 
 }
 }
   
function save() {
        var file = new java.io.File( android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/games/com.mojang/deadCraftWorlds/"+Level.getWorldDir()+"/Multiple Homes/", "Home "+name+".txt");
        var path=android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/games/com.mojang/deadCraftWorlds/"+Level.getWorldDir()+"/Multiple Homes/" ; 
        java.io.File(path).mkdirs(); 
        file.createNewFile();
        var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(file));
        var string="";
        write.append(xhome.toString());
        write.append(","+ yhome.toString());
        write.append(","+ zhome.toString()); 
        write.close();
         
    } 
 
function load(){
 var line, string = "";
    var file = new java.io.File( android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/games/com.mojang/deadCraftWorlds/"+Level.getWorldDir()+"/Multiple Homes/", "Home "+name+".txt");
    var path=android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/games/com.mojang/deadCraftWorlds/"+Level.getWorldDir()+"/Multiple Homes/"; 
    if(!file.exists()){
    clientMessage("§8[MH] §fThe home doesn't exist"); 
  java.io.File(path).mkdirs(); 
    }
    else {
    var readfile = new java.io.BufferedReader(new java.io.FileReader(file));
    while((line = readfile.readLine()) != null) {
        var t1 = line + java.lang.System.getProperty("line.seperator");
        string += t1.substring(0, t1.length - 4);
        var t2 = line;
        if((line = readfile.readLine()) != null) string += "\n";
        line = t2;
    } 
    xhome=parseInt(string.split(",")[0]);    
    yhome= parseInt(string.split(",")[1]);
    zhome= parseInt(string.split(",")[2]);
    Entity.setPosition(Player.getEntity(),xhome,yhome,zhome);       
    }
}

  
function newLevel(){
 clientMessage("§8[MH] §fMultiple Homes §3v"+version+"§f \n§8[MH] §fBy Bajan_Deadman0 \n§8[MH] §fDo not distribute "); 
}
